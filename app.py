import streamlit as st
import streamlit_server_state as server_state
import concurrent.futures
import uuid
import time
import pandas as pd
import re
from streamlit_autorefresh import st_autorefresh

# –í–∞—à–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
import requests
import json

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–∞–¥–∞—á
if 'tasks' not in server_state:
    server_state.tasks = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
executor = concurrent.futures.ThreadPoolExecutor(max_workers=5)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á –≤ —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
def submit_task(function, *args, **kwargs):
    task_id = str(uuid.uuid4())
    server_state.tasks[task_id] = {
        'status': 'running',
        'progress': 0.0,
        'result': None,
        'start_time': time.time(),
        'end_time': None
    }
    
    def task_wrapper(task_id, *args, **kwargs):
        try:
            result = function(*args, task_id=task_id, **kwargs)
            server_state.tasks[task_id]['status'] = 'completed'
            server_state.tasks[task_id]['result'] = result
            server_state.tasks[task_id]['end_time'] = time.time()
        except Exception as e:
            server_state.tasks[task_id]['status'] = 'failed'
            server_state.tasks[task_id]['result'] = str(e)
            server_state.tasks[task_id]['end_time'] = time.time()
    
    executor.submit(task_wrapper, task_id, *args, **kwargs)
    st.session_state.current_task_id = task_id
    
    return task_id

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
def process_file(
    api_key: str,
    model: str,
    system_prompt: str,
    user_prompt: str,
    df: pd.DataFrame,
    title_col: str,
    response_format: str,
    max_tokens: int,
    temperature: float,
    top_p: float,
    min_p: float,
    top_k: int,
    presence_penalty: float,
    frequency_penalty: float,
    repetition_penalty: float,
    chunk_size: int = 10,
    max_workers: int = 5,
    task_id: str = None
):
    total_rows = len(df)
    results = []
    
    for start_idx in range(0, total_rows, chunk_size):
        end_idx = min(start_idx + chunk_size, total_rows)
        chunk_indices = list(df.index[start_idx:end_idx])
        chunk_size_actual = len(chunk_indices)
        chunk_results = [None] * chunk_size_actual

        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor_inner:
            future_to_i = {}
            for i, row_idx in enumerate(chunk_indices):
                row_text = str(df.loc[row_idx, title_col])
                future = executor_inner.submit(
                    process_single_row,  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏
                    api_key,
                    model,
                    system_prompt,
                    user_prompt,
                    row_text,
                    max_tokens,
                    temperature,
                    top_p,
                    min_p,
                    top_k,
                    presence_penalty,
                    frequency_penalty,
                    repetition_penalty
                )
                future_to_i[future] = i

            for future in concurrent.futures.as_completed(future_to_i):
                i = future_to_i[future]
                chunk_results[i] = future.result()

        results.extend(chunk_results)
        progress = len(results) / total_rows
        server_state.tasks[task_id]['progress'] = progress

    df_out = df.copy()
    df_out["rewrite"] = results

    return "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ñ–∞–π–ª–∞
def process_translation_file(
    api_key: str,
    model: str,
    system_prompt: str,
    user_prompt: str,
    df: pd.DataFrame,
    title_col: str,
    max_tokens: int,
    temperature: float,
    top_p: float,
    min_p: float,
    top_k: int,
    presence_penalty: float,
    frequency_penalty: float,
    repetition_penalty: float,
    chunk_size: int = 10,
    max_workers: int = 5,
    task_id: str = None
):
    total_rows = len(df)
    results = []
    
    for start_idx in range(0, total_rows, chunk_size):
        end_idx = min(start_idx + chunk_size, total_rows)
        chunk_indices = list(df.index[start_idx:end_idx])
        chunk_size_actual = len(chunk_indices)
        chunk_results = [None] * chunk_size_actual

        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor_inner:
            future_to_i = {}
            for i, row_idx in enumerate(chunk_indices):
                row_text = str(df.loc[row_idx, title_col])
                future = executor_inner.submit(
                    process_translation_single_row,  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
                    api_key,
                    model,
                    system_prompt,
                    user_prompt,
                    row_text,
                    max_tokens,
                    temperature,
                    top_p,
                    min_p,
                    top_k,
                    presence_penalty,
                    frequency_penalty,
                    repetition_penalty
                )
                future_to_i[future] = i

            for future in concurrent.futures.as_completed(future_to_i):
                i = future_to_i[future]
                chunk_results[i] = future.result()

        results.extend(chunk_results)
        progress = len(results) / total_rows
        server_state.tasks[task_id]['progress'] = progress

    df_out = df.copy()
    df_out["translated_title"] = results

    return "–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω."

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üß† Novita AI Batch Processor")

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ API Key, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
st.sidebar.header("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
api_key = st.sidebar.text_input("API Key", value=st.secrets.get("novita_api_key", ""), type="password")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
st.sidebar.header("üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á")

with st.sidebar.expander("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"):
    input_task_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ Task ID", key="input_task_id")
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key="check_status"):
        if not input_task_id:
            st.error("‚ùå Task ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        else:
            task = server_state.tasks.get(input_task_id)
            if task:
                status = task['status']
                progress = task['progress']
                result = task['result']
                start_time = task['start_time']
                end_time = task['end_time']
    
                st.write(f"**Task ID:** {input_task_id}")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {status}")
                st.progress(progress)
                st.write(f"**–ù–∞—á–∞–ª–æ:** {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time))}")
                if end_time:
                    st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:** {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(end_time))}")
                else:
                    st.write("**–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:** –í –ø—Ä–æ—Ü–µ—Å—Å–µ")
    
                if status == 'completed':
                    st.write(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result}")
                elif status == 'failed':
                    st.error(f"**–û—à–∏–±–∫–∞:** {result}")
            else:
                st.error("‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –í–∫–ª–∞–¥–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
tabs = st.tabs(["üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞", "üåê –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"])

########################################
# –í–∫–ª–∞–¥–∫–∞ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
########################################
with tabs[0]:
    st.header("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞
    with st.expander("üé® –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ –º–æ–¥–µ–ª–∏", expanded=True):
        preset_names = list(PRESETS.keys())
        selected_preset = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç", preset_names, index=0)

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
        preset = PRESETS[selected_preset]
        system_prompt_text = preset["system_prompt"]
        max_tokens_text = preset["max_tokens"]
        temperature_text = preset["temperature"]
        top_p_text = preset["top_p"]
        min_p_text = preset["min_p"]
        top_k_text = preset["top_k"]
        presence_penalty_text = preset["presence_penalty"]
        frequency_penalty_text = preset["frequency_penalty"]
        repetition_penalty_text = preset["repetition_penalty"]

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞", key="reset_preset_text"):
            selected_preset = "Default"
            preset = PRESETS[selected_preset]
            system_prompt_text = preset["system_prompt"]
            max_tokens_text = preset["max_tokens"]
            temperature_text = preset["temperature"]
            top_p_text = preset["top_p"]
            min_p_text = preset["min_p"]
            top_k_text = preset["top_k"]
            presence_penalty_text = preset["presence_penalty"]
            frequency_penalty_text = preset["frequency_penalty"]
            repetition_penalty_text = preset["repetition_penalty"]

    st.markdown("---")

    # –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    left_col, right_col = st.columns([1, 1])

    ########################################
    # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    ########################################
    with left_col:
        st.subheader("üìö –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")
        st.caption("üîÑ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ API Novita AI")

        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π (–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞)", key="refresh_models_text"):
            if not api_key:
                st.error("‚ùå –ö–ª—é—á API –ø—É—Å—Ç")
                server_state.tasks['model_list_text'] = []
            else:
                model_list_text = get_model_list(api_key)
                server_state.tasks['model_list_text'] = model_list_text

        if 'model_list_text' not in server_state.tasks:
            server_state.tasks['model_list_text'] = []

        if len(server_state.tasks['model_list_text']) > 0:
            selected_model_text = st.selectbox("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞", server_state.tasks['model_list_text'], key="select_model_text")
        else:
            selected_model_text = st.selectbox(
                "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞",
                ["meta-llama/llama-3.1-8b-instruct", "Nous-Hermes-2-Mixtral-8x7B-DPO"],
                key="select_model_default_text"
            )

    ########################################
    # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    ########################################
    with right_col:
        with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", expanded=True):
            st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")

            # –ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ—Å–µ—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            system_prompt_text = st.text_area("üìù System Prompt", value=system_prompt_text, key="system_prompt_text")

            max_tokens_text = st.slider("üî¢ max_tokens", min_value=0, max_value=64000, value=max_tokens_text, step=1, key="max_tokens_text")
            temperature_text = st.slider("üå°Ô∏è temperature", min_value=0.0, max_value=2.0, value=temperature_text, step=0.01, key="temperature_text")
            top_p_text = st.slider("üìä top_p", min_value=0.0, max_value=1.0, value=top_p_text, step=0.01, key="top_p_text")
            min_p_text = st.slider("üìâ min_p", min_value=0.0, max_value=1.0, value=min_p_text, step=0.01, key="min_p_text")
            top_k_text = st.slider("üîù top_k", min_value=0, max_value=100, value=top_k_text, step=1, key="top_k_text")
            presence_penalty_text = st.slider("‚öñÔ∏è presence_penalty", min_value=0.0, max_value=2.0, value=presence_penalty_text, step=0.01, key="presence_penalty_text")
            frequency_penalty_text = st.slider("üìâ frequency_penalty", min_value=0.0, max_value=2.0, value=frequency_penalty_text, step=0.01, key="frequency_penalty_text")
            repetition_penalty_text = st.slider("üîÅ repetition_penalty", min_value=0.0, max_value=2.0, value=repetition_penalty_text, step=0.01, key="repetition_penalty_text")

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    st.markdown("---")

    ########################################
    # –ü–æ–ª–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    ########################################
    st.subheader("üìù –û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
    user_prompt_single_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", key="user_prompt_single_text")

    if st.button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞)", key="submit_single_text"):
        if not api_key:
            st.error("‚ùå API Key –Ω–µ —É–∫–∞–∑–∞–Ω!")
        elif not user_prompt_single_text.strip():
            st.error("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        else:
            from_text = [
                {"role": "system", "content": system_prompt_text},
                {"role": "user", "content": user_prompt_single_text}
            ]
            st.info("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
            raw_response = chat_completion_request(
                api_key=api_key,
                messages=from_text,
                model=selected_model_text,
                max_tokens=max_tokens_text,
                temperature=temperature_text,
                top_p=top_p_text,
                min_p=min_p_text,
                top_k=top_k_text,
                presence_penalty=presence_penalty_text,
                frequency_penalty=frequency_penalty_text,
                repetition_penalty=repetition_penalty_text
            )
            # –ú–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å custom_postprocess_text, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            final_response = custom_postprocess_text(raw_response)
            st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω!")
            st.text_area("üìÑ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏", value=final_response, height=200)

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    st.markdown("---")

    ########################################
    # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    ########################################
    st.subheader("üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞")

    user_prompt_text = st.text_area("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É)", key="user_prompt_text")

    st.markdown("##### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ TXT/CSV")
    with st.expander("üìë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞", expanded=True):
        delimiter_input_text = st.text_input("üî∏ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (delimiter)", value="|", key="delimiter_input_text")
        column_input_text = st.text_input("üî∏ –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value="id,title", key="column_input_text")

    uploaded_file_text = st.file_uploader("üì§ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª (CSV –∏–ª–∏ TXT, –¥–æ 100000 —Å—Ç—Ä–æ–∫)", type=["csv", "txt"], key="uploaded_file_text")

    df_text = None
    if uploaded_file_text is not None:
        file_extension = uploaded_file_text.name.split(".")[-1].lower()
        try:
            if file_extension == "csv":
                df_text = pd.read_csv(uploaded_file_text)
            else:
                content = uploaded_file_text.read().decode("utf-8")
                lines = content.splitlines()

                columns = [c.strip() for c in column_input_text.split(",")]

                parsed_lines = []
                for line in lines:
                    splitted = line.split(delimiter_input_text, maxsplit=len(columns) - 1)
                    if len(splitted) < len(columns):
                        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
                        splitted += [""] * (len(columns) - len(splitted))
                    parsed_lines.append(splitted)

                df_text = pd.DataFrame(parsed_lines, columns=columns)

            st.write("### üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞")
            num_preview = st.number_input("üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", min_value=1, max_value=100, value=10)
            st.dataframe(df_text.head(num_preview))
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            df_text = None

    if df_text is not None:
        cols_text = df_text.columns.tolist()
        with st.expander("üìÇ –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ —Ñ–∞–π–ª–∞", expanded=True):
            title_col_text = st.selectbox("üìå –ö–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º?", cols_text, key="title_col_text")

            # –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª-–≤–∞ –ø–æ—Ç–æ–∫–æ–≤
            max_workers_text = st.slider("üîÑ –ü–æ—Ç–æ–∫–∏ (max_workers)", min_value=1, max_value=20, value=5, key="max_workers_text")

        if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ (–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞)", key="process_file_text"):
            if not api_key:
                st.error("‚ùå API Key –Ω–µ —É–∫–∞–∑–∞–Ω!")
            else:
                row_count = len(df_text)
                if row_count > 100000:
                    st.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {row_count} —Å—Ç—Ä–æ–∫. –≠—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç –≤ 100000.")
                st.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
                task_id = submit_task(
                    process_file,
                    api_key=api_key,
                    model=selected_model_text,
                    system_prompt=system_prompt_text,
                    user_prompt=user_prompt_text,
                    df=df_text,
                    title_col=title_col_text,
                    response_format="csv",
                    max_tokens=max_tokens_text,
                    temperature=temperature_text,
                    top_p=top_p_text,
                    min_p=min_p_text,
                    top_k=top_k_text,
                    presence_penalty=presence_penalty_text,
                    frequency_penalty=frequency_penalty_text,
                    repetition_penalty=repetition_penalty_text,
                    chunk_size=10,
                    max_workers=max_workers_text
                )

                st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞—Ç–∞! –í–∞—à Task ID: {task_id}")
                st.info("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")

    ########################################
    # –í–∫–ª–∞–¥–∫–∞ 2: –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    ########################################
with tabs[1]:
    st.header("üåê –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞
    with st.expander("üé® –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", expanded=True):
        preset_names_translate = list(PRESETS.keys())
        selected_preset_translate = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", preset_names_translate, index=0)

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
        preset_translate = PRESETS[selected_preset_translate]
        system_prompt_translate = preset_translate["system_prompt"]
        max_tokens_translate = preset_translate["max_tokens"]
        temperature_translate = preset_translate["temperature"]
        top_p_translate = preset_translate["top_p"]
        min_p_translate = preset_translate["min_p"]
        top_k_translate = preset_translate["top_k"]
        presence_penalty_translate = preset_translate["presence_penalty"]
        frequency_penalty_translate = preset_translate["frequency_penalty"]
        repetition_penalty_translate = preset_translate["repetition_penalty"]

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", key="reset_preset_translate"):
            selected_preset_translate = "Default"
            preset_translate = PRESETS[selected_preset_translate]
            system_prompt_translate = preset_translate["system_prompt"]
            max_tokens_translate = preset_translate["max_tokens"]
            temperature_translate = preset_translate["temperature"]
            top_p_translate = preset_translate["top_p"]
            min_p_translate = preset_translate["min_p"]
            top_k_translate = preset_translate["top_k"]
            presence_penalty_translate = preset_translate["presence_penalty"]
            frequency_penalty_translate = preset_translate["frequency_penalty"]
            repetition_penalty_translate = preset_translate["repetition_penalty"]

    st.markdown("---")

    # –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    left_col_trans, right_col_trans = st.columns([1, 1])

    ########################################
    # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    ########################################
    with left_col_trans:
        st.subheader("üìö –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞")
        st.caption("üîÑ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ API Novita AI")

        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π (–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞)", key="refresh_models_translate"):
            if not api_key:
                st.error("‚ùå –ö–ª—é—á API –ø—É—Å—Ç")
                server_state.tasks['model_list_translate'] = []
            else:
                model_list_translate = get_model_list(api_key)
                server_state.tasks['model_list_translate'] = model_list_translate

        if 'model_list_translate' not in server_state.tasks:
            server_state.tasks['model_list_translate'] = []

        if len(server_state.tasks['model_list_translate']) > 0:
            selected_model_translate = st.selectbox("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞", server_state.tasks['model_list_translate'], key="select_model_translate")
        else:
            selected_model_translate = st.selectbox(
                "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞",
                ["meta-llama/llama-3.1-8b-instruct", "Nous-Hermes-2-Mixtral-8x7B-DPO"],
                key="select_model_default_translate"
            )

    ########################################
    # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    ########################################
    with right_col_trans:
        with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", expanded=True):
            st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞")
            translate_output_format = st.selectbox("üì• –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", ["csv", "txt"], key="translate_output_format")  # CSV –∏–ª–∏ TXT
            system_prompt_translate = st.text_area("üìù System Prompt –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", value=system_prompt_translate, key="system_prompt_translate")

            max_tokens_translate = st.slider("üî¢ max_tokens (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0, max_value=64000, value=max_tokens_translate, step=1, key="max_tokens_translate")
            temperature_translate = st.slider("üå°Ô∏è temperature (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=2.0, value=temperature_translate, step=0.01, key="temperature_translate")
            top_p_translate = st.slider("üìä top_p (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=1.0, value=top_p_translate, step=0.01, key="top_p_translate")
            min_p_translate = st.slider("üìâ min_p (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=1.0, value=min_p_translate, step=0.01, key="min_p_translate")
            top_k_translate = st.slider("üîù top_k (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0, max_value=100, value=top_k_translate, step=1, key="top_k_translate")
            presence_penalty_translate = st.slider("‚öñÔ∏è presence_penalty (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=2.0, value=presence_penalty_translate, step=0.01, key="presence_penalty_translate")
            frequency_penalty_translate = st.slider("üìâ frequency_penalty (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=2.0, value=frequency_penalty_translate, step=0.01, key="frequency_penalty_translate")
            repetition_penalty_translate = st.slider("üîÅ repetition_penalty (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=2.0, value=repetition_penalty_translate, step=0.01, key="repetition_penalty_translate")

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    st.markdown("---")

    ########################################
    # –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    ########################################
    st.subheader("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞")

    languages = ["English", "Chinese", "Japanese", "Hindi"]
    source_language = st.selectbox("üî† –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫", languages, index=0, key="source_language")
    target_language = st.selectbox("üî° –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫", languages, index=1, key="target_language")

    if source_language == target_language:
        st.warning("‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!")

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    st.markdown("---")

    ########################################
    # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    ########################################
    st.subheader("üìÇ –ü–µ—Ä–µ–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞")

    with st.expander("üìë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", expanded=True):
        delimiter_input_translate = st.text_input("üî∏ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (delimiter) –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", value="|", key="delimiter_input_translate")
        column_input_translate = st.text_input("üî∏ –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", value="id,title", key="column_input_translate")

    uploaded_file_translate = st.file_uploader("üì§ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (CSV –∏–ª–∏ TXT, –¥–æ 100000 —Å—Ç—Ä–æ–∫)", type=["csv", "txt"], key="uploaded_file_translate")

    df_translate = None
    if uploaded_file_translate is not None:
        file_extension_translate = uploaded_file_translate.name.split(".")[-1].lower()
        try:
            if file_extension_translate == "csv":
                df_translate = pd.read_csv(uploaded_file_translate)
            else:
                content_translate = uploaded_file_translate.read().decode("utf-8")
                lines_translate = content_translate.splitlines()

                columns_translate = [c.strip() for c in column_input_translate.split(",")]

                parsed_lines_translate = []
                for line in lines_translate:
                    splitted_translate = line.split(delimiter_input_translate, maxsplit=len(columns_translate) - 1)
                    if len(splitted_translate) < len(columns_translate):
                        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
                        splitted_translate += [""] * (len(columns_translate) - len(splitted_translate))
                    parsed_lines_translate.append(splitted_translate)

                df_translate = pd.DataFrame(parsed_lines_translate, columns=columns_translate)

            st.write("### üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            num_preview_translate = st.number_input("üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", min_value=1, max_value=100, value=10, key="num_preview_translate")
            st.dataframe(df_translate.head(num_preview_translate))
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            df_translate = None

    if df_translate is not None:
        cols_translate = df_translate.columns.tolist()
        with st.expander("üìÇ –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", expanded=True):
            id_col_translate = st.selectbox("üÜî –ö–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ —è–≤–ª—è–µ—Ç—Å—è ID?", cols_translate, key="id_col_translate")
            title_col_translate = st.selectbox("üìå –ö–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞?", cols_translate, key="title_col_translate")

            # –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª-–≤–∞ –ø–æ—Ç–æ–∫–æ–≤
            max_workers_translate = st.slider("üîÑ –ü–æ—Ç–æ–∫–∏ (max_workers) –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", min_value=1, max_value=20, value=5, key="max_workers_translate")

        if st.button("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥", key="start_translation"):
            if not api_key:
                st.error("‚ùå API Key –Ω–µ —É–∫–∞–∑–∞–Ω!")
            elif source_language == target_language:
                st.error("‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!")
            elif not title_col_translate:
                st.error("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!")
            else:
                row_count_translate = len(df_translate)
                if row_count_translate > 100000:
                    st.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {row_count_translate} —Å—Ç—Ä–æ–∫. –≠—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç –≤ 100000.")
                st.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                user_prompt_translate = f"Translate the following text from {source_language} to {target_language}:"

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
                task_id_translate = submit_task(
                    process_translation_file,
                    api_key=api_key,
                    model=selected_model_translate,
                    system_prompt=system_prompt_translate,
                    user_prompt=user_prompt_translate,
                    df=df_translate,
                    title_col=title_col_translate,
                    max_tokens=max_tokens_translate,
                    temperature=temperature_translate,
                    top_p=top_p_translate,
                    min_p=min_p_translate,
                    top_k=top_k_translate,
                    presence_penalty=presence_penalty_translate,
                    frequency_penalty=frequency_penalty_translate,
                    repetition_penalty=repetition_penalty_translate,
                    chunk_size=10,
                    max_workers=max_workers_translate
                )

                st.success(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞—á–∞—Ç! –í–∞—à Task ID: {task_id_translate}")
                st.info("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
if 'current_task_id' not in st.session_state:
    st.session_state.current_task_id = None

if st.session_state.current_task_id:
    task = server_state.tasks.get(st.session_state.current_task_id)
    if task:
        status = task['status']
        progress = task['progress']
        result = task['result']
        start_time = task['start_time']
        end_time = task['end_time']

        st.write(f"**–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:** {st.session_state.current_task_id}")
        st.write(f"**–°—Ç–∞—Ç—É—Å:** {status}")
        st.progress(progress)
        st.write(f"**–ù–∞—á–∞–ª–æ:** {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time))}")
        if end_time:
            st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:** {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(end_time))}")
        else:
            st.write("**–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:** –í –ø—Ä–æ—Ü–µ—Å—Å–µ")

        if status == 'completed':
            st.write(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {result}")
            st.session_state.current_task_id = None  # –°–±—Ä–æ—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            st.success("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        elif status == 'failed':
            st.error(f"**–û—à–∏–±–∫–∞:** {result}")
            st.session_state.current_task_id = None  # –°–±—Ä–æ—Å –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        else:
            # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            st_autorefresh(interval=5000, key="progress_refresh_current_task")

