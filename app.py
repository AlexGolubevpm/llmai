import streamlit as st
import streamlit_server_state as server_state
from streamlit_autorefresh import st_autorefresh
import concurrent.futures
import uuid
import time
import pandas as pd
import requests
import json
import re

#######################################
# 1) –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
#######################################

# –ë–∞–∑–æ–≤—ã–π URL API Novita
API_BASE_URL = "https://api.novita.ai/v3/openai"
LIST_MODELS_ENDPOINT = f"{API_BASE_URL}/models"
CHAT_COMPLETIONS_ENDPOINT = f"{API_BASE_URL}/chat/completions"

# –ö–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ù–ï–ë–ï–ó–û–ü–ê–°–ù–û –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥–µ)
DEFAULT_API_KEY = "sk_MyidbhnT9jXzw-YDymhijjY8NF15O0Qy7C36etNTAxE"

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ 429 (Rate Limit)
MAX_RETRIES = 3

st.set_page_config(page_title="üß† Novita AI Batch Processor", layout="wide")

#######################################
# 2) –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
#######################################

def custom_postprocess_text(text: str) -> str:
    """
    –£–±–∏—Ä–∞–µ–º 'fucking' (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏.
    –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –≤—Å–µ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    """
    # –£–¥–∞–ª—è–µ–º 'fucking' –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    pattern_start = re.compile(r'^(fucking\s*)', re.IGNORECASE)
    text = pattern_start.sub('', text)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    text = text.replace('"', '')
    
    return text

def get_model_list(api_key: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç Novita AI"""
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    try:
        resp = requests.get(LIST_MODELS_ENDPOINT, headers=headers)
        if resp.status_code == 200:
            data = resp.json()
            models = [m["id"] for m in data.get("data", [])]
            return models
        else:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ö–æ–¥: {resp.status_code}. –¢–µ–∫—Å—Ç: {resp.text}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return []

def chat_completion_request(
    api_key: str,
    messages: list,
    model: str,
    max_tokens: int,
    temperature: float,
    top_p: float,
    min_p: float,
    top_k: int,
    presence_penalty: float,
    frequency_penalty: float,
    repetition_penalty: float
):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ (–Ω–µ-—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ) chat-–∫–æ–º–ø–ª–∏—à–µ–Ω–∞ —Å retries –Ω–∞ 429."""
    payload = {
        "model": model,
        "messages": messages,
        "max_tokens": max_tokens,
        "temperature": temperature,
        "top_p": top_p,
        "top_k": top_k,
        "presence_penalty": presence_penalty,
        "frequency_penalty": frequency_penalty,
        "repetition_penalty": repetition_penalty,
        "min_p": min_p
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

    attempts = 0
    while attempts < MAX_RETRIES:
        attempts += 1
        try:
            resp = requests.post(CHAT_COMPLETIONS_ENDPOINT, headers=headers, data=json.dumps(payload))
            if resp.status_code == 200:
                data = resp.json()
                return data["choices"][0]["message"].get("content", "")
            elif resp.status_code == 429:
                # rate limit exceeded, –∂–¥–µ–º 2 —Å–µ–∫
                time.sleep(2)
                # –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                continue
            else:
                return f"–û—à–∏–±–∫–∞: {resp.status_code} - {resp.text}"
        except Exception as e:
            return f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    return "–û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ 429 RATE_LIMIT."

def process_single_row(
    api_key: str,
    model: str,
    system_prompt: str,
    user_prompt: str,
    row_text: str,
    max_tokens: int,
    temperature: float,
    top_p: float,
    min_p: float,
    top_k: int,
    presence_penalty: float,
    frequency_penalty: float,
    repetition_penalty: float
):
    """–§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞."""
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": f"{user_prompt}\n{row_text}"}
    ]
    raw_response = chat_completion_request(
        api_key,
        messages,
        model,
        max_tokens,
        temperature,
        top_p,
        min_p,
        top_k,
        presence_penalty,
        frequency_penalty,
        repetition_penalty
    )

    # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º banned words –∏ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    final_response = custom_postprocess_text(raw_response)
    return final_response

def process_file(
    task_id: str,
    api_key: str,
    model: str,
    system_prompt: str,
    user_prompt: str,
    df: pd.DataFrame,
    title_col: str,  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
    response_format: str,
    max_tokens: int,
    temperature: float,
    top_p: float,
    min_p: float,
    top_k: int,
    presence_penalty: float,
    frequency_penalty: float,
    repetition_penalty: float,
    chunk_size: int = 10,  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º 10 —Å—Ç—Ä–æ–∫ –≤ —á–∞–Ω–∫–µ
    max_workers: int = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (–∏–ª–∏ —á–∞–Ω–∫–∞–º–∏)."""

    tasks = server_state.get('tasks')
    tasks[task_id]['status'] = 'running'
    tasks[task_id]['start_time'] = time.time()
    server_state.set('tasks', tasks)

    results = []
    total_rows = len(df)

    start_time = time.time()
    lines_processed = 0

    for start_idx in range(0, total_rows, chunk_size):
        chunk_start_time = time.time()
        end_idx = min(start_idx + chunk_size, total_rows)

        # –ë–µ—Ä—ë–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫ –≤ —ç—Ç–æ–º —á–∞–Ω–∫–µ
        chunk_indices = list(df.index[start_idx:end_idx])
        chunk_size_actual = len(chunk_indices)
        chunk_results = [None] * chunk_size_actual

        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_i = {}
            for i, row_idx in enumerate(chunk_indices):
                row_text = str(df.loc[row_idx, title_col])
                future = executor.submit(
                    process_single_row,
                    api_key,
                    model,
                    system_prompt,
                    user_prompt,
                    row_text,
                    max_tokens,
                    temperature,
                    top_p,
                    min_p,
                    top_k,
                    presence_penalty,
                    frequency_penalty,
                    repetition_penalty
                )
                future_to_i[future] = i

            for future in concurrent.futures.as_completed(future_to_i):
                i = future_to_i[future]
                chunk_results[i] = future.result()

        # –†–∞—Å—à–∏—Ä—è–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results.extend(chunk_results)

        lines_processed += chunk_size_actual
        progress = lines_processed / total_rows
        tasks[task_id]['progress'] = progress
        server_state.set('tasks', tasks)

        time_for_chunk = time.time() - chunk_start_time
        if chunk_size_actual > 0:
            time_per_line = time_for_chunk / chunk_size_actual
            lines_left = total_rows - lines_processed
            if time_per_line > 0:
                est_time_left_sec = lines_left * time_per_line
                if est_time_left_sec < 60:
                    time_text = f"~{est_time_left_sec:.1f} —Å–µ–∫."
                else:
                    est_time_left_min = est_time_left_sec / 60.0
                    time_text = f"~{est_time_left_min:.1f} –º–∏–Ω."
                tasks[task_id]['estimated_time_left'] = time_text
                server_state.set('tasks', tasks)

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é df —Å –Ω–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–æ–º
    df_out = df.copy()
    df_out["rewrite"] = results

    elapsed = time.time() - start_time
    tasks[task_id]['status'] = 'completed'
    tasks[task_id]['end_time'] = time.time()
    server_state.set('tasks', tasks)

    return df_out

# ======= –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ =======

def translate_completion_request(
    api_key: str,
    messages: list,
    model: str,
    max_tokens: int,
    temperature: float,
    top_p: float,
    min_p: float,
    top_k: int,
    presence_penalty: float,
    frequency_penalty: float,
    repetition_penalty: float
):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å retries –Ω–∞ 429."""
    raw_response = chat_completion_request(
        api_key,
        messages,
        model,
        max_tokens,
        temperature,
        top_p,
        min_p,
        top_k,
        presence_penalty,
        frequency_penalty,
        repetition_penalty
    )

    # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º banned words –∏ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    final_response = custom_postprocess_text(raw_response)
    return final_response

def process_translation_single_row(
    api_key: str,
    model: str,
    system_prompt: str,
    user_prompt: str,
    row_text: str,
    max_tokens: int,
    temperature: float,
    top_p: float,
    min_p: float,
    top_k: int,
    presence_penalty: float,
    frequency_penalty: float,
    repetition_penalty: float
):
    """–§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞."""
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": f"{user_prompt}\n{row_text}"}
    ]
    translated_text = translate_completion_request(
        api_key=api_key,
        messages=messages,
        model=model,
        max_tokens=max_tokens,
        temperature=temperature,
        top_p=top_p,
        min_p=min_p,
        top_k=top_k,
        presence_penalty=presence_penalty,
        frequency_penalty=frequency_penalty,
        repetition_penalty=repetition_penalty
    )
    return translated_text

def process_translation_file(
    task_id: str,
    api_key: str,
    model: str,
    system_prompt: str,
    user_prompt: str,
    df: pd.DataFrame,
    title_col: str,  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
    max_tokens: int,
    temperature: float,
    top_p: float,
    min_p: float,
    top_k: int,
    presence_penalty: float,
    frequency_penalty: float,
    repetition_penalty: float,
    chunk_size: int = 10,  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º 10 —Å—Ç—Ä–æ–∫ –≤ —á–∞–Ω–∫–µ
    max_workers: int = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (–∏–ª–∏ —á–∞–Ω–∫–∞–º–∏)."""

    tasks = server_state.get('tasks')
    tasks[task_id]['status'] = 'running'
    tasks[task_id]['start_time'] = time.time()
    server_state.set('tasks', tasks)

    results = []
    total_rows = len(df)

    start_time = time.time()
    lines_processed = 0

    for start_idx in range(0, total_rows, chunk_size):
        chunk_start_time = time.time()
        end_idx = min(start_idx + chunk_size, total_rows)

        # –ë–µ—Ä—ë–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫ –≤ —ç—Ç–æ–º —á–∞–Ω–∫–µ
        chunk_indices = list(df.index[start_idx:end_idx])
        chunk_size_actual = len(chunk_indices)
        chunk_results = [None] * chunk_size_actual

        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_i = {}
            for i, row_idx in enumerate(chunk_indices):
                row_text = str(df.loc[row_idx, title_col])
                future = executor.submit(
                    process_translation_single_row,
                    api_key,
                    model,
                    system_prompt,
                    user_prompt,
                    row_text,
                    max_tokens,
                    temperature,
                    top_p,
                    min_p,
                    top_k,
                    presence_penalty,
                    frequency_penalty,
                    repetition_penalty
                )
                future_to_i[future] = i

            for future in concurrent.futures.as_completed(future_to_i):
                i = future_to_i[future]
                chunk_results[i] = future.result()

        # –†–∞—Å—à–∏—Ä—è–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results.extend(chunk_results)

        lines_processed += chunk_size_actual
        progress = lines_processed / total_rows
        tasks[task_id]['progress'] = progress
        server_state.set('tasks', tasks)

        time_for_chunk = time.time() - chunk_start_time
        if chunk_size_actual > 0:
            time_per_line = time_for_chunk / chunk_size_actual
            lines_left = total_rows - lines_processed
            if time_per_line > 0:
                est_time_left_sec = lines_left * time_per_line
                if est_time_left_sec < 60:
                    time_text = f"~{est_time_left_sec:.1f} —Å–µ–∫."
                else:
                    est_time_left_min = est_time_left_sec / 60.0
                    time_text = f"~{est_time_left_min:.1f} –º–∏–Ω."
                tasks[task_id]['estimated_time_left'] = time_text
                server_state.set('tasks', tasks)

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é df —Å –Ω–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–æ–º
    df_out = df.copy()
    df_out["translated_title"] = results

    elapsed = time.time() - start_time
    tasks[task_id]['status'] = 'completed'
    tasks[task_id]['end_time'] = time.time()
    server_state.set('tasks', tasks)

    return df_out

#######################################
# 3) –ü–†–ï–°–ï–¢–´ –ú–û–î–ï–õ–ï–ô
#######################################

PRESETS = {
    "Default": {
        "system_prompt": "Act like you are a helpful assistant.",
        "max_tokens": 512,
        "temperature": 0.70,
        "top_p": 1.0,
        "min_p": 0.0,
        "top_k": 40,
        "presence_penalty": 0.0,
        "frequency_penalty": 0.0,
        "repetition_penalty": 1.0
    },
    "NSFW": {
        "system_prompt": "You are an advanced NSFW content rewriter and evaluator. Generate one vivid and explicit title based on the input, ensuring it stays within 90 characters. The title should align with NSFW standards, SEO relevance, and native fluency.",
        "max_tokens": 32000,
        "temperature": 0.70,
        "top_p": 1.0,
        "min_p": 0.0,
        "top_k": 40,
        "presence_penalty": 0.20,
        "frequency_penalty": 0.40,
        "repetition_penalty": 1.22
    },
    "Adult_Content_Generator": {
        "system_prompt": "You are a professional content creator specializing in adult NSFW content. Generate creative and engaging content based on the input provided.",
        "max_tokens": 2500,
        "temperature": 0.85,
        "top_p": 0.95,
        "min_p": 0.0,
        "top_k": 50,
        "presence_penalty": 0.30,
        "frequency_penalty": 0.50,
        "repetition_penalty": 1.50
    },
    "Erotic_Story_Teller": {
        "system_prompt": "You are an expert in writing erotic stories. Generate a captivating and tasteful story based on the input provided.",
        "max_tokens": 5000,
        "temperature": 0.75,
        "top_p": 0.90,
        "min_p": 0.0,
        "top_k": 60,
        "presence_penalty": 0.25,
        "frequency_penalty": 0.35,
        "repetition_penalty": 1.30
    }
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–µ—Å–µ—Ç–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

#######################################
# 4) –ò–ù–¢–ï–†–§–ï–ô–°
#######################################

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–∞–¥–∞—á
if not server_state.get('tasks'):
    server_state.set('tasks', {})

# –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
executor_main = concurrent.futures.ThreadPoolExecutor(max_workers=5)

st.title("üß† Novita AI Batch Processor")

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ API Key, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
st.sidebar.header("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
api_key = st.sidebar.text_input("API Key", value=DEFAULT_API_KEY, type="password")

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
tabs = st.tabs(["üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞", "üåê –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞", "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á"])

########################################
# –í–∫–ª–∞–¥–∫–∞ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
########################################
with tabs[0]:
    st.header("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞
    with st.expander("üé® –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ –º–æ–¥–µ–ª–∏", expanded=True):
        preset_names = list(PRESETS.keys())
        selected_preset = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç", preset_names, index=0)

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
        preset = PRESETS[selected_preset]
        system_prompt_text = preset["system_prompt"]
        max_tokens_text = preset["max_tokens"]
        temperature_text = preset["temperature"]
        top_p_text = preset["top_p"]
        min_p_text = preset["min_p"]
        top_k_text = preset["top_k"]
        presence_penalty_text = preset["presence_penalty"]
        frequency_penalty_text = preset["frequency_penalty"]
        repetition_penalty_text = preset["repetition_penalty"]

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞", key="reset_preset_text"):
            selected_preset = "Default"
            preset = PRESETS[selected_preset]
            system_prompt_text = preset["system_prompt"]
            max_tokens_text = preset["max_tokens"]
            temperature_text = preset["temperature"]
            top_p_text = preset["top_p"]
            min_p_text = preset["min_p"]
            top_k_text = preset["top_k"]
            presence_penalty_text = preset["presence_penalty"]
            frequency_penalty_text = preset["frequency_penalty"]
            repetition_penalty_text = preset["repetition_penalty"]

    st.markdown("---")

    # –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    left_col, right_col = st.columns([1, 1])

    ########################################
    # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
    ########################################
    with left_col:
        st.subheader("üìö –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")
        st.caption("üîÑ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ API Novita AI")

        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π (–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞)", key="refresh_models_text"):
            if not api_key:
                st.error("‚ùå –ö–ª—é—á API –ø—É—Å—Ç")
            else:
                # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
                task_id = uuid.uuid4().hex
                tasks = server_state.get('tasks')
                tasks[task_id] = {
                    'status': 'loading_models_text',
                    'progress': 0.0,
                    'result': None,
                    'start_time': time.time(),
                    'end_time': None,
                    'type': 'loading_models_text'
                }
                server_state.set('tasks', tasks)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
                executor_main.submit(
                    load_models_task,
                    task_id,
                    api_key
                )

                st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π –∑–∞–ø—É—â–µ–Ω–∞! –í–∞—à Task ID: {task_id}")
                st.info("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ autorefresh
        st_autorefresh(interval=2000, limit=100, key="autorefresh_models_text")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ server_state
        tasks = server_state.get('tasks')
        model_list_text = []
        for task_id, task in tasks.items():
            if task.get('status') == 'completed' and task.get('type') == 'loading_models_text':
                model_list_text = task.get('result', [])
                break

        if len(model_list_text) > 0:
            selected_model_text = st.selectbox("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞", model_list_text, key="select_model_text")
        else:
            selected_model_text = st.selectbox(
                "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞",
                ["meta-llama/llama-3.1-8b-instruct", "Nous-Hermes-2-Mixtral-8x7B-DPO"],
                key="select_model_default_text"
            )

    ########################################
    # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    ########################################
    with right_col:
        with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", expanded=True):
            st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")

            # –ó–¥–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ—Å–µ—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            system_prompt_text = st.text_area("üìù System Prompt", value=system_prompt_text, key="system_prompt_text")

            max_tokens_text = st.slider("üî¢ max_tokens", min_value=0, max_value=64000, value=max_tokens_text, step=1, key="max_tokens_text")
            temperature_text = st.slider("üå°Ô∏è temperature", min_value=0.0, max_value=2.0, value=temperature_text, step=0.01, key="temperature_text")
            top_p_text = st.slider("üìä top_p", min_value=0.0, max_value=1.0, value=top_p_text, step=0.01, key="top_p_text")
            min_p_text = st.slider("üìâ min_p", min_value=0.0, max_value=1.0, value=min_p_text, step=0.01, key="min_p_text")
            top_k_text = st.slider("üîù top_k", min_value=0, max_value=100, value=top_k_text, step=1, key="top_k_text")
            presence_penalty_text = st.slider("‚öñÔ∏è presence_penalty", min_value=0.0, max_value=2.0, value=presence_penalty_text, step=0.01, key="presence_penalty_text")
            frequency_penalty_text = st.slider("üìâ frequency_penalty", min_value=0.0, max_value=2.0, value=frequency_penalty_text, step=0.01, key="frequency_penalty_text")
            repetition_penalty_text = st.slider("üîÅ repetition_penalty", min_value=0.0, max_value=2.0, value=repetition_penalty_text, step=0.01, key="repetition_penalty_text")

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    st.markdown("---")

    ########################################
    # –ü–æ–ª–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    ########################################
    st.subheader("üìù –û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
    user_prompt_single_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", key="user_prompt_single_text")

    if st.button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞)", key="submit_single_text"):
        if not api_key:
            st.error("‚ùå API Key –Ω–µ —É–∫–∞–∑–∞–Ω!")
        elif not user_prompt_single_text.strip():
            st.error("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        else:
            from_text = [
                {"role": "system", "content": system_prompt_text},
                {"role": "user", "content": user_prompt_single_text}
            ]
            st.info("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
            raw_response = chat_completion_request(
                api_key=api_key,
                messages=from_text,
                model=selected_model_text,
                max_tokens=max_tokens_text,
                temperature=temperature_text,
                top_p=top_p_text,
                min_p=min_p_text,
                top_k=top_k_text,
                presence_penalty=presence_penalty_text,
                frequency_penalty=frequency_penalty_text,
                repetition_penalty=repetition_penalty_text
            )
            # –ú–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å custom_postprocess_text, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            final_response = custom_postprocess_text(raw_response)
            st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω!")
            st.text_area("üìÑ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏", value=final_response, height=200)

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    st.markdown("---")

    ########################################
    # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    ########################################
    st.subheader("üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞")

    user_prompt_text = st.text_area("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É)", key="user_prompt_text")

    st.markdown("##### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ TXT/CSV")
    with st.expander("üìë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞", expanded=True):
        delimiter_input_text = st.text_input("üî∏ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (delimiter)", value="|", key="delimiter_input_text")
        column_input_text = st.text_input("üî∏ –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value="id,title", key="column_input_text")

    uploaded_file_text = st.file_uploader("üì§ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª (CSV –∏–ª–∏ TXT, –¥–æ 100000 —Å—Ç—Ä–æ–∫)", type=["csv", "txt"], key="uploaded_file_text")

    df_text = None
    if uploaded_file_text is not None:
        file_extension = uploaded_file_text.name.split(".")[-1].lower()
        try:
            if file_extension == "csv":
                df_text = pd.read_csv(uploaded_file_text)
            else:
                content = uploaded_file_text.read().decode("utf-8")
                lines = content.splitlines()

                columns = [c.strip() for c in column_input_text.split(",")]

                parsed_lines = []
                for line in lines:
                    splitted = line.split(delimiter_input_text, maxsplit=len(columns) - 1)
                    if len(splitted) < len(columns):
                        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
                        splitted += [""] * (len(columns) - len(splitted))
                    parsed_lines.append(splitted)

                df_text = pd.DataFrame(parsed_lines, columns=columns)

            st.write("### üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞")
            num_preview = st.number_input("üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", min_value=1, max_value=100, value=10, key="num_preview_text")
            st.dataframe(df_text.head(num_preview))
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            df_text = None

    if df_text is not None:
        cols_text = df_text.columns.tolist()
        with st.expander("üìÇ –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ —Ñ–∞–π–ª–∞", expanded=True):
            title_col_text = st.selectbox("üìå –ö–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º?", cols_text, key="title_col_text")

            # –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª-–≤–∞ –ø–æ—Ç–æ–∫–æ–≤
            max_workers_text = st.slider("üîÑ –ü–æ—Ç–æ–∫–∏ (max_workers)", min_value=1, max_value=20, value=5, key="max_workers_text")

        if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ (–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞)", key="process_file_text"):
            if not api_key:
                st.error("‚ùå API Key –Ω–µ —É–∫–∞–∑–∞–Ω!")
            else:
                row_count = len(df_text)
                if row_count > 100000:
                    st.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {row_count} —Å—Ç—Ä–æ–∫. –≠—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç –≤ 100000.")
                st.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
                task_id = uuid.uuid4().hex

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ server_state
                tasks = server_state.get('tasks')
                tasks[task_id] = {
                    'status': 'queued',
                    'progress': 0.0,
                    'result': None,
                    'start_time': None,
                    'end_time': None,
                    'type': 'processing_text'
                }
                server_state.set('tasks', tasks)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
                executor_main.submit(
                    process_file,
                    task_id,
                    api_key,
                    selected_model_text,
                    system_prompt_text,
                    user_prompt_text,
                    df_text,
                    title_col_text,
                    "csv",  # response_format, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    max_tokens_text,
                    temperature_text,
                    top_p_text,
                    min_p_text,
                    top_k_text,
                    presence_penalty_text,
                    frequency_penalty_text,
                    repetition_penalty_text,
                    chunk_size=10,
                    max_workers=max_workers_text
                )

                st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞! –í–∞—à Task ID: {task_id}")
                st.info("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    st.markdown("---")

########################################
# –í–∫–ª–∞–¥–∫–∞ 2: –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
########################################
with tabs[1]:
    st.header("üåê –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞
    with st.expander("üé® –í—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", expanded=True):
        preset_names_translate = list(PRESETS.keys())
        selected_preset_translate = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", preset_names_translate, index=0)

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
        preset_translate = PRESETS[selected_preset_translate]
        system_prompt_translate = preset_translate["system_prompt"]
        max_tokens_translate = preset_translate["max_tokens"]
        temperature_translate = preset_translate["temperature"]
        top_p_translate = preset_translate["top_p"]
        min_p_translate = preset_translate["min_p"]
        top_k_translate = preset_translate["top_k"]
        presence_penalty_translate = preset_translate["presence_penalty"]
        frequency_penalty_translate = preset_translate["frequency_penalty"]
        repetition_penalty_translate = preset_translate["repetition_penalty"]

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", key="reset_preset_translate"):
            selected_preset_translate = "Default"
            preset_translate = PRESETS[selected_preset_translate]
            system_prompt_translate = preset_translate["system_prompt"]
            max_tokens_translate = preset_translate["max_tokens"]
            temperature_translate = preset_translate["temperature"]
            top_p_translate = preset_translate["top_p"]
            min_p_translate = preset_translate["min_p"]
            top_k_translate = preset_translate["top_k"]
            presence_penalty_translate = preset_translate["presence_penalty"]
            frequency_penalty_translate = preset_translate["frequency_penalty"]
            repetition_penalty_translate = preset_translate["repetition_penalty"]

    st.markdown("---")

    # –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    left_col_trans, right_col_trans = st.columns([1, 1])

    ########################################
    # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    ########################################
    with left_col_trans:
        st.subheader("üìö –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞")
        st.caption("üîÑ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ API Novita AI")

        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π (–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞)", key="refresh_models_translate"):
            if not api_key:
                st.error("‚ùå –ö–ª—é—á API –ø—É—Å—Ç")
            else:
                # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
                task_id = uuid.uuid4().hex
                tasks = server_state.get('tasks')
                tasks[task_id] = {
                    'status': 'loading_models_translate',
                    'progress': 0.0,
                    'result': None,
                    'start_time': time.time(),
                    'end_time': None,
                    'type': 'loading_models_translate'
                }
                server_state.set('tasks', tasks)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
                executor_main.submit(
                    load_models_translate_task,
                    task_id,
                    api_key
                )

                st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞! –í–∞—à Task ID: {task_id}")
                st.info("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ autorefresh
        st_autorefresh(interval=2000, limit=100, key="autorefresh_models_translate")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ server_state
        tasks = server_state.get('tasks')
        model_list_translate = []
        for task_id, task in tasks.items():
            if task.get('status') == 'completed' and task.get('type') == 'loading_models_translate':
                model_list_translate = task.get('result', [])
                break

        if len(model_list_translate) > 0:
            selected_model_translate = st.selectbox("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞", model_list_translate, key="select_model_translate")
        else:
            selected_model_translate = st.selectbox(
                "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞",
                ["meta-llama/llama-3.1-8b-instruct", "Nous-Hermes-2-Mixtral-8x7B-DPO"],
                key="select_model_default_translate"
            )

    ########################################
    # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    ########################################
    with right_col_trans:
        with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", expanded=True):
            st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞")
            translate_output_format = st.selectbox("üì• –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", ["csv", "txt"], key="translate_output_format")  # CSV –∏–ª–∏ TXT
            system_prompt_translate = st.text_area("üìù System Prompt –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", value=system_prompt_translate, key="system_prompt_translate")

            max_tokens_translate = st.slider("üî¢ max_tokens (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0, max_value=64000, value=max_tokens_translate, step=1, key="max_tokens_translate")
            temperature_translate = st.slider("üå°Ô∏è temperature (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=2.0, value=temperature_translate, step=0.01, key="temperature_translate")
            top_p_translate = st.slider("üìä top_p (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=1.0, value=top_p_translate, step=0.01, key="top_p_translate")
            min_p_translate = st.slider("üìâ min_p (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=1.0, value=min_p_translate, step=0.01, key="min_p_translate")
            top_k_translate = st.slider("üîù top_k (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0, max_value=100, value=top_k_translate, step=1, key="top_k_translate")
            presence_penalty_translate = st.slider("‚öñÔ∏è presence_penalty (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=2.0, value=presence_penalty_translate, step=0.01, key="presence_penalty_translate")
            frequency_penalty_translate = st.slider("üìâ frequency_penalty (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=2.0, value=frequency_penalty_translate, step=0.01, key="frequency_penalty_translate")
            repetition_penalty_translate = st.slider("üîÅ repetition_penalty (–ø–µ—Ä–µ–≤–æ–¥)", min_value=0.0, max_value=2.0, value=repetition_penalty_translate, step=0.01, key="repetition_penalty_translate")

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    st.markdown("---")

    ########################################
    # –ü–æ–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    ########################################
    st.subheader("üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞")

    languages = ["English", "Chinese", "Japanese", "Hindi"]
    source_language = st.selectbox("üî† –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫", languages, index=0, key="source_language")
    target_language = st.selectbox("üî° –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫", languages, index=1, key="target_language")

    if source_language == target_language:
        st.warning("‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!")

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    st.markdown("---")

    ########################################
    # –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    ########################################
    st.subheader("üìÇ –ü–µ—Ä–µ–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞")

    with st.expander("üìë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", expanded=True):
        delimiter_input_translate = st.text_input("üî∏ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (delimiter) –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", value="|", key="delimiter_input_translate")
        column_input_translate = st.text_input("üî∏ –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", value="id,title", key="column_input_translate")

    uploaded_file_translate = st.file_uploader("üì§ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (CSV –∏–ª–∏ TXT, –¥–æ 100000 —Å—Ç—Ä–æ–∫)", type=["csv", "txt"], key="uploaded_file_translate")

    df_translate = None
    if uploaded_file_translate is not None:
        file_extension_translate = uploaded_file_translate.name.split(".")[-1].lower()
        try:
            if file_extension_translate == "csv":
                df_translate = pd.read_csv(uploaded_file_translate)
            else:
                content_translate = uploaded_file_translate.read().decode("utf-8")
                lines_translate = content_translate.splitlines()

                columns_translate = [c.strip() for c in column_input_translate.split(",")]

                parsed_lines_translate = []
                for line in lines_translate:
                    splitted_translate = line.split(delimiter_input_translate, maxsplit=len(columns_translate) - 1)
                    if len(splitted_translate) < len(columns_translate):
                        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
                        splitted_translate += [""] * (len(columns_translate) - len(splitted_translate))
                    parsed_lines_translate.append(splitted_translate)

                df_translate = pd.DataFrame(parsed_lines_translate, columns=columns_translate)

            st.write("### üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            num_preview_translate = st.number_input("üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞", min_value=1, max_value=100, value=10, key="num_preview_translate")
            st.dataframe(df_translate.head(num_preview_translate))
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            df_translate = None

    if df_translate is not None:
        cols_translate = df_translate.columns.tolist()
        with st.expander("üìÇ –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", expanded=True):
            id_col_translate = st.selectbox("üÜî –ö–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ —è–≤–ª—è–µ—Ç—Å—è ID?", cols_translate, key="id_col_translate")
            title_col_translate = st.selectbox("üìå –ö–∞–∫–∞—è –∫–æ–ª–æ–Ω–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞?", cols_translate, key="title_col_translate")

            # –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª-–≤–∞ –ø–æ—Ç–æ–∫–æ–≤
            max_workers_translate = st.slider("üîÑ –ü–æ—Ç–æ–∫–∏ (max_workers) –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", min_value=1, max_value=20, value=5, key="max_workers_translate")

        if st.button("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥", key="start_translation"):
            if not api_key:
                st.error("‚ùå API Key –Ω–µ —É–∫–∞–∑–∞–Ω!")
            elif source_language == target_language:
                st.error("‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è!")
            elif not title_col_translate:
                st.error("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!")
            else:
                row_count_translate = len(df_translate)
                if row_count_translate > 100000:
                    st.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {row_count_translate} —Å—Ç—Ä–æ–∫. –≠—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç –≤ 100000.")
                st.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
                task_id = uuid.uuid4().hex

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ server_state
                tasks = server_state.get('tasks')
                tasks[task_id] = {
                    'status': 'queued',
                    'progress': 0.0,
                    'result': None,
                    'start_time': None,
                    'end_time': None,
                    'type': 'translation'
                }
                server_state.set('tasks', tasks)

                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                user_prompt_translate = f"Translate the following text from {source_language} to {target_language}:"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
                executor_main.submit(
                    process_translation_file,
                    task_id,
                    api_key,
                    selected_model_translate,
                    system_prompt_translate,
                    user_prompt_translate,
                    df_translate,
                    title_col_translate,
                    max_tokens_translate,
                    temperature_translate,
                    top_p_translate,
                    min_p_translate,
                    top_k_translate,
                    presence_penalty_translate,
                    frequency_penalty_translate,
                    repetition_penalty_translate,
                    chunk_size=10,
                    max_workers=max_workers_translate
                )

                st.success(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞! –í–∞—à Task ID: {task_id}")
                st.info("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    st.markdown("---")

########################################
# –í–∫–ª–∞–¥–∫–∞ 3: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
########################################
with tabs[2]:
    st.header("üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á")

    tasks = server_state.get('tasks')

    if not tasks:
        st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
    else:
        task_ids = list(tasks.keys())
        selected_task_id = st.selectbox("üÜî –í—ã–±–µ—Ä–∏—Ç–µ Task ID –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", task_ids, key="selected_task_id_tracking")

        if selected_task_id:
            task = tasks[selected_task_id]
            st.write(f"**Task ID:** {selected_task_id}")
            st.write(f"**–¢–∏–ø –∑–∞–¥–∞—á–∏:** {task.get('type')}")
            st.write(f"**–°—Ç–∞—Ç—É—Å:** {task.get('status')}")
            progress = task.get('progress', 0.0)
            st.progress(progress)

            if task.get('start_time'):
                st.write(f"**–ù–∞—á–∞–ª–æ:** {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(task['start_time']))}")
            if task.get('end_time'):
                st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:** {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(task['end_time']))}")
            else:
                est_time_left = task.get('estimated_time_left', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                st.write(f"**–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:** {est_time_left}")

            if task.get('status') == 'completed':
                if task.get('type') == 'processing_text':
                    st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                elif task.get('type') == 'translation':
                    st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                    # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            elif task.get('status') == 'failed':
                st.error(f"**–û—à–∏–±–∫–∞:** {task.get('result')}")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
    st_autorefresh(interval=5000, limit=100, key="autorefresh_tasks_tracking")

#######################################
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ó–∞–≥—Ä—É–∑–∫–∏ –ú–æ–¥–µ–ª–µ–π
#######################################

def load_models_task(task_id: str, api_key: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    tasks = server_state.get('tasks')
    tasks[task_id]['status'] = 'running'
    server_state.set('tasks', tasks)

    models = get_model_list(api_key)

    if isinstance(models, list):
        tasks[task_id]['status'] = 'completed'
        tasks[task_id]['result'] = models
    else:
        tasks[task_id]['status'] = 'failed'
        tasks[task_id]['result'] = models  # –ó–¥–µ—Å—å models —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

    tasks[task_id]['end_time'] = time.time()
    server_state.set('tasks', tasks)

def load_models_translate_task(task_id: str, api_key: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    tasks = server_state.get('tasks')
    tasks[task_id]['status'] = 'running'
    server_state.set('tasks', tasks)

    models = get_model_list(api_key)

    if isinstance(models, list):
        tasks[task_id]['status'] = 'completed'
        tasks[task_id]['result'] = models
    else:
        tasks[task_id]['status'] = 'failed'
        tasks[task_id]['result'] = models  # –ó–¥–µ—Å—å models —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

    tasks[task_id]['end_time'] = time.time()
    server_state.set('tasks', tasks)

