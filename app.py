import streamlit as st
import requests
import json
import pandas as pd

#######################################
# 1) –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
#######################################

# –ë–∞–∑–æ–≤—ã–π URL API Novita
API_BASE_URL = "https://api.novita.ai/v3/openai"
LIST_MODELS_ENDPOINT = f"{API_BASE_URL}/models"
CHAT_COMPLETIONS_ENDPOINT = f"{API_BASE_URL}/chat/completions"

# –ö–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ù–ï–ë–ï–ó–û–ü–ê–°–ù–û –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥–µ)
DEFAULT_API_KEY = "sk_MyidbhnT9jXzw-YDymhijjY8NF15O0Qy7C36etNTAxE"

st.set_page_config(page_title="Novita AI Batch Processor", layout="wide")

#######################################
# 2) –§–£–ù–ö–¶–ò–ò
#######################################

def get_model_list(api_key: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç Novita AI"""
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    try:
        resp = requests.get(LIST_MODELS_ENDPOINT, headers=headers)
        if resp.status_code == 200:
            data = resp.json()
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ data["data"] —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
            models = [m["id"] for m in data.get("data", [])]
            return models
        else:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ö–æ–¥: {resp.status_code}. –¢–µ–∫—Å—Ç: {resp.text}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return []


def process_file(
    api_key: str,
    model: str,
    system_prompt: str,
    user_prompt: str,
    df: pd.DataFrame,
    response_format: str,
    max_tokens: int,
    temperature: float,
    top_p: float,
    min_p: float,
    top_k: int,
    presence_penalty: float,
    frequency_penalty: float,
    repetition_penalty: float,
    chunk_size: int = 5000
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ (–∏–ª–∏ —á–∞–Ω–∫–∞–º–∏)"""

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    progress_bar = st.progress(0)
    results = []

    # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, —Ä–∞–∑–æ–±—å–µ–º –Ω–∞ —á–∞–Ω–∫–∏
    total_rows = len(df)
    for start_idx in range(0, total_rows, chunk_size):
        end_idx = min(start_idx + chunk_size, total_rows)
        chunk = df.iloc[start_idx:end_idx]
        
        for idx, row in chunk.iterrows():
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"{user_prompt}\n{str(row[0])}"}  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
            ]

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            payload = {
                "model": model,
                "messages": messages,
                "max_tokens": max_tokens,
                "temperature": temperature,
                "top_p": top_p,
                "top_k": top_k,
                "presence_penalty": presence_penalty,
                "frequency_penalty": frequency_penalty,
                "repetition_penalty": repetition_penalty,
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–≤–∏–∂–∫–∏ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å min_p;
                # –µ—Å–ª–∏ Novita AI –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç, –æ—Å—Ç–∞–≤–∏–º, –∏–Ω–∞—á–µ —É–±–µ—Ä–µ–º.
                "min_p": min_p
            }

            try:
                resp = requests.post(CHAT_COMPLETIONS_ENDPOINT, headers={
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {api_key}"
                }, data=json.dumps(payload))

                if resp.status_code == 200:
                    data = resp.json()
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ data
                    content = data["choices"][0]["message"].get("content", "")
                    results.append(content)
                else:
                    results.append(f"Error: {resp.status_code} - {resp.text}")
            except Exception as e:
                results.append(f"Exception: {str(e)}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_bar.progress(end_idx / total_rows)

    # –ì–æ—Ç–æ–≤–∏–º –∏—Ç–æ–≥–∏
    df_out = df.copy()
    df_out["response"] = results

    return df_out

#######################################
# 3) –ò–ù–¢–ï–†–§–ï–ô–°
#######################################

st.title("üß† Novita AI Batch Processing")

left_col, right_col = st.columns([1,1])

# –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
with left_col:
    st.markdown("#### –ú–æ–¥–µ–ª–∏")
    st.caption("–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ API Novita AI")

    api_key = st.text_input("API Key", value=DEFAULT_API_KEY, type="password")

    if st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"):
        if not api_key:
            st.error("–ö–ª—é—á API –ø—É—Å—Ç")
            model_list = []
        else:
            model_list = get_model_list(api_key)
            st.session_state["model_list"] = model_list

    if "model_list" not in st.session_state:
        st.session_state["model_list"] = []

    if len(st.session_state["model_list"]) > 0:
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", st.session_state["model_list"])
    else:
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", ["meta-llama/llama-3.1-8b-instruct", "Nous-Hermes-2-Mixtral-8x7B-DPO"])

# –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
with right_col:
    st.markdown("#### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    response_format = st.selectbox("Response Format", ["text", "csv"])
    system_prompt = st.text_area("System Prompt", value="Act like you are a helpful assistant.")

    max_tokens = st.slider("max_tokens", min_value=0, max_value=64000, value=512, step=1)
    temperature = st.slider("temperature", min_value=0.0, max_value=2.0, value=0.7, step=0.01)
    top_p = st.slider("top_p", min_value=0.0, max_value=1.0, value=1.0, step=0.01)
    min_p = st.slider("min_p", min_value=0.0, max_value=1.0, value=0.0, step=0.01)
    top_k = st.slider("top_k", min_value=0, max_value=100, value=40, step=1)
    presence_penalty = st.slider("presence_penalty", min_value=0.0, max_value=2.0, value=0.0, step=0.01)
    frequency_penalty = st.slider("frequency_penalty", min_value=0.0, max_value=2.0, value=0.0, step=0.01)
    repetition_penalty = st.slider("repetition_penalty", min_value=0.0, max_value=2.0, value=1.0, step=0.01)

st.markdown("---")
st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

user_prompt = st.text_area("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç")

uploaded_file = st.file_uploader("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª (CSV –∏–ª–∏ TXT, –¥–æ 100000 —Å—Ç—Ä–æ–∫)", type=["csv", "txt"])

if uploaded_file is not None:
    file_extension = uploaded_file.name.split(".")[-1]
    try:
        if file_extension == "csv":
            # —á–∏—Ç–∞–µ–º CSV –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            df = pd.read_csv(uploaded_file)
        else:
            # —á–∏—Ç–∞–µ–º TXT —Å –ø–æ–º–æ—â—å—é engine='python' –∏ delimiter='\n'
            df = pd.read_csv(uploaded_file, delimiter="\n", header=None, engine='python')
        st.write("### –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞")
        st.dataframe(df.head())
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        df = None

    if df is not None:
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å"):
            if not api_key:
                st.error("API Key –Ω–µ —É–∫–∞–∑–∞–Ω!")
            else:
                row_count = len(df)
                if row_count > 100000:
                    st.warning(f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {row_count} —Å—Ç—Ä–æ–∫. –≠—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –ª–∏–º–∏—Ç –≤ 100000.")
                st.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

                df_out = process_file(
                    api_key=api_key,
                    model=selected_model,
                    system_prompt=system_prompt,
                    user_prompt=user_prompt,
                    df=df,
                    response_format=response_format,
                    max_tokens=max_tokens,
                    temperature=temperature,
                    top_p=top_p,
                    min_p=min_p,
                    top_k=top_k,
                    presence_penalty=presence_penalty,
                    frequency_penalty=frequency_penalty,
                    repetition_penalty=repetition_penalty,
                )

                st.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

                # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if response_format == "text":
                    st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç", value="\n".join(df_out["response"].astype(str)), height=300)
                else:
                    csv_out = df_out.to_csv(index=False).encode("utf-8")
                    st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (CSV)", data=csv_out, file_name="result.csv", mime="text/csv")

                st.write("### –õ–æ–≥–∏")
                st.write("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:", len(df_out))
